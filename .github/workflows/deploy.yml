name: Deploy to Fly.io (Reuse Existing App)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Fly token is present
        run: |
          if [ -z "${{ secrets.FLY_API_TOKEN }}" ]; then
            echo "FLY_API_TOKEN secret is missing (Settings → Secrets and variables → Actions)."
            exit 1
          fi

      - name: Resolve app & region
        run: |
          APP="${{ vars.FLY_APP_NAME || 'fly-io-integration' }}"
          REGION="${{ vars.FLY_PRIMARY_REGION || 'ord' }}"
          echo "APP=$APP" >> "$GITHUB_ENV"
          echo "REGION=$REGION" >> "$GITHUB_ENV"
          echo "Using app: $APP  region: $REGION"

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Confirm app exists and you own it
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -e
          # Ensure it's in your app list
          flyctl apps list | awk 'NR>1 {print $1}' | grep -qx "$APP" || { echo "::error::App $APP not in your account."; exit 2; }
          echo "App $APP is in your account."

      - name: Patch fly.toml (optional)
        run: |
          if [ -f fly.toml ]; then
            sed -i 's/^app = ".*/app = "'"$APP"'"/' fly.toml || true
            sed -i 's/^primary_region = ".*/primary_region = "'"$REGION"'"/' fly.toml || true
            echo "fly.toml app/region set to: $APP / $REGION"
          fi

      - name: Set Fly secrets (idempotent)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          ARGS=""
          [ -n "${{ secrets.CERBERUS_API_KEY }}" ]  && ARGS="$ARGS CERBERUS_API_KEY=${{ secrets.CERBERUS_API_KEY }}"
          [ -n "${{ secrets.REQUIRE_TIMESTAMP }}" ] && ARGS="$ARGS REQUIRE_TIMESTAMP=${{ secrets.REQUIRE_TIMESTAMP }}"
          [ -n "${{ secrets.GEMINI_API_KEY }}" ]    && ARGS="$ARGS GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
          if [ -n "$ARGS" ]; then
            flyctl secrets set $ARGS --app "$APP"
          else
            echo "No app secrets provided; skipping."
          fi

      - name: Deploy (remote build, verbose)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --remote-only --app "$APP" --verbose

      - name: Output URL
        run: |
          echo "https://$APP.fly.dev" > URL.txt
          cat URL.txt

      - name: Upload URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-url
          path: URL.txt
