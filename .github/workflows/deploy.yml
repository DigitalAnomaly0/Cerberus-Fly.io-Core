name: Deploy to Fly.io (DIAGNOSTIC)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print runner context
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"

      - name: Verify Fly token is present
        run: |
          if [ -z "${{ secrets.FLY_API_TOKEN }}" ]; then
            echo "FLY_API_TOKEN secret is missing (Settings → Secrets and variables → Actions)."
            exit 1
          fi
          echo "FLY_API_TOKEN is set."

      - name: Resolve app & region (from repo Variables)
        run: |
          echo "FLY_APP_NAME=${{ vars.FLY_APP_NAME || 'cerberus-sam-001' }}" >> $GITHUB_ENV
          echo "FLY_PRIMARY_REGION=${{ vars.FLY_PRIMARY_REGION || 'ord' }}" >> $GITHUB_ENV
          echo "Resolved FLY_APP_NAME=$FLY_APP_NAME"
          echo "Resolved FLY_PRIMARY_REGION=$FLY_PRIMARY_REGION"

      - name: Show fly.toml BEFORE patch
        run: |
          echo "----- fly.toml (before) -----"
          sed -n '1,120p' fly.toml || true

      - name: Patch fly.toml with app name & region (diagnostic)
        run: |
          set -euxo pipefail
          sed -i 's/^app = ".*/app = "'"$FLY_APP_NAME"'"/' fly.toml
          sed -i 's/^primary_region = ".*/primary_region = "'"$FLY_PRIMARY_REGION"'"/' fly.toml
          echo "----- fly.toml (after) -----"
          grep -E '^(app|primary_region)' fly.toml || true

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Who am I? Which orgs?
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -euxo pipefail
          flyctl version
          echo "----- flyctl auth whoami -----"
          flyctl auth whoami || true
          echo "----- flyctl orgs list -----"
          flyctl orgs list || true

      - name: Which apps does this token see?
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -euxo pipefail
          echo "----- flyctl apps list -----"
          flyctl apps list || true
          echo "Trying to show target app: $FLY_APP_NAME"
          flyctl apps show "$FLY_APP_NAME" || echo "apps show FAILED (expected if app doesn't exist yet)"

      - name: Attempt to create app (loud; personal owner)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -euxo pipefail
          echo "Creating (or confirming) app: $FLY_APP_NAME"
          # If it already exists under this account, this will fail harmlessly; we ignore with || true
          flyctl apps create "$FLY_APP_NAME" || true
          echo "Re-check:"
          flyctl apps show "$FLY_APP_NAME" || (echo "Still cannot see app $FLY_APP_NAME" && exit 2)

      - name: Dry-run deploy prechecks (no image build)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -euxo pipefail
          echo "Status (may be empty if first deploy):"
          flyctl status --app "$FLY_APP_NAME" || true
          echo "VALIDATE CONFIG:"
          flyctl config validate -c fly.toml || true

      - name: STOP HERE (no deploy)
        run: |
          echo "Diagnostics complete. Review logs above to identify failure point."
