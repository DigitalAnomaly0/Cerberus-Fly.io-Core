name: Deploy to Fly.io (Personal)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Fly token is present
        run: |
          if [ -z "${{ secrets.FLY_API_TOKEN }}" ]; then
            echo "FLY_API_TOKEN secret is missing (Settings → Secrets and variables → Actions)."
            exit 1
          fi

      - name: Resolve app & region
        run: |
          echo "FLY_APP_NAME=${{ vars.FLY_APP_NAME || 'cerberus-skn-20250928-001' }}" >> $GITHUB_ENV
          echo "FLY_PRIMARY_REGION=${{ vars.FLY_PRIMARY_REGION || 'ord' }}" >> $GITHUB_ENV
          echo "App: $FLY_APP_NAME"
          echo "Region: $FLY_PRIMARY_REGION"

      - name: Patch fly.toml with app name & region
        run: |
          sed -i 's/^app = ".*/app = "'"$FLY_APP_NAME"'"/' fly.toml
          sed -i 's/^primary_region = ".*/primary_region = "'"$FLY_PRIMARY_REGION"'"/' fly.toml
          echo "fly.toml →"
          grep -E '^(app|primary_region)' fly.toml || true

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Who am I / orgs (diag)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl version
          flyctl auth whoami || true
          flyctl orgs list || true

      # Create app if missing; if name is taken globally, fail with a clear message
      - name: Create app if missing (Personal)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -e
          if flyctl apps list | awk '{print $1}' | grep -qx "$FLY_APP_NAME"; then
            echo "App $FLY_APP_NAME already exists under your account."
          else
            echo "Attempting to create app: $FLY_APP_NAME"
            set +e
            CREATE_OUT=$(flyctl apps create "$FLY_APP_NAME" 2>&1)
            CODE=$?
            set -e
            echo "$CREATE_OUT"
            if [ $CODE -ne 0 ]; then
              if echo "$CREATE_OUT" | grep -qi "Not authorized to deploy this app"; then
                echo "::error::The app name '$FLY_APP_NAME' is already taken globally. Choose a different, unique name in repo Variables and re-run."
                exit 2
              fi
              exit $CODE
            fi
          fi

      - name: Set Fly secrets (idempotent)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          ARGS=""
          [ -n "${{ secrets.CERBERUS_API_KEY }}" ]  && ARGS="$ARGS CERBERUS_API_KEY=${{ secrets.CERBERUS_API_KEY }}"
          [ -n "${{ secrets.REQUIRE_TIMESTAMP }}" ] && ARGS="$ARGS REQUIRE_TIMESTAMP=${{ secrets.REQUIRE_TIMESTAMP }}"
          [ -n "${{ secrets.GEMINI_API_KEY }}" ]    && ARGS="$ARGS GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
          if [ -n "$ARGS" ]; then
            flyctl secrets set $ARGS --app "$FLY_APP_NAME"
          else
            echo "No app secrets provided; skipping."
          fi

      - name: Deploy (remote build, verbose)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --remote-only --app "$FLY_APP_NAME" --verbose

      - name: Output URL
        run: echo "https://$FLY_APP_NAME.fly.dev" > URL.txt

      - name: Upload URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-url
          path: URL.txt
