name: Deploy to Fly.io

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Fly token is present
        run: |
          if [ -z "${{ secrets.FLY_API_TOKEN }}" ]; then
            echo "FLY_API_TOKEN secret is missing. Add it under Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Resolve app & region (from repo Variables, with safe defaults)
        run: |
          echo "FLY_APP_NAME=${{ vars.FLY_APP_NAME || 'cerberus' }}" >> $GITHUB_ENV
          echo "FLY_PRIMARY_REGION=${{ vars.FLY_PRIMARY_REGION || 'ord' }}" >> $GITHUB_ENV
          echo "App: $FLY_APP_NAME"
          echo "Region: $FLY_PRIMARY_REGION"

      - name: Patch fly.toml with app name & region
        run: |
          sed -i 's/^app = ".*/app = "'"$FLY_APP_NAME"'"/' fly.toml
          sed -i 's/^primary_region = ".*/primary_region = "'"$FLY_PRIMARY_REGION"'"/' fly.toml
          echo "fly.toml patched:"
          grep -E '^(app|primary_region)' fly.toml

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create app if missing (loud)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -e
          if flyctl apps show "$FLY_APP_NAME" >/dev/null 2>&1; then
            echo "App $FLY_APP_NAME already exists."
          else
            echo "Creating app $FLY_APP_NAME ..."
            # This will FAIL clearly if the name is globally taken by someone else
            flyctl apps create "$FLY_APP_NAME"
          fi

      - name: Verify app is accessible
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          set -e
          flyctl apps show "$FLY_APP_NAME"
          echo "OK: App is accessible."

      - name: Deploy (remote build, verbose)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl version
          flyctl status --app "$FLY_APP_NAME" || true
          flyctl deploy --remote-only --app "$FLY_APP_NAME" --verbose

      - name: Output URL
        run: echo "https://$FLY_APP_NAME.fly.dev" > URL.txt

      - name: Upload URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-url
          path: URL.txt
